description: >
  Check for the number of builds triggered per user. Set a threshold for user builds in a certain timeframe.
  If a user build exceeds this threshold, alert via Slack and cancel all currently running workflows for that user.

executor: python
resource_class: small

# do params have to be passed as env vars?
parameters:
  circle-project-org:
    type: string
  circle-project-reponame:
    type: string
  circle-token-envvar:
    type: string
    default: 'SLACK_MONITOR_CIRCLE_TOKEN'
  slack-app-url-envvar:
    type: env_var_name
    default: SLACK_MONITOR_SLACK_APP_URL
  gh-token-env-var:
    type: env_var_name
    default: SLACK_MONITOR_GH_TOKEN
  cancel-message:
    type: string
    default: 'Your builds on CircleCI have exceeded the max builds allowed for a single user.'
  alert-threshold-seconds:
    type: integer
    default: 60
  # max builds triggered by a single user within threshold_seconds of the current time
  alert-threshold-max-builds-per-user:
    type: integer
    default: 5
  # max within a minute of the latest build that triggers an alert, must be < 30
  alert-threshold-max-builds:
    type: integer
    default: 5
  siren-test:
    type: boolean
    default: false

environment:
  circle-project-org: << parameters.circle-project-org >>
  circle-project-reponame: << parameters.circle-project-reponame >>
  circle-token-envvar: << parameters.circle-token-envvar >>
  slack-app-url-envvar: << parameters.slack-app-url-envvar >>
  gh-token-env-var: << parameters.gh-token-env-var >>
  cancel-message: << parameters.cancel-message >>
  alert-threshold-seconds: << parameters.alert-threshold-seconds >>
  alert-threshold-max-builds-per-user: << parameters.alert-threshold-max-builds-per-user >>
  alert-threshold-max-builds: << parameters.alert-threshold-max-builds >>
  siren-test: << parameters.siren-test >>

steps:
  - run:
      name: Run Python script to check builds
      command: |
        cat \<< EOF | python
        # BEGIN PYTHON SCRIPT
        import json
        import os
        import urllib.request
        import datetime


        def make_request(endpoint, circle_token):
            header = {
                'Circle-Token': circle_token,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            req = urllib.request.Request(endpoint, headers=header)
            return transform_response(req)


        def transform_response(req):
            res_stream = urllib.request.urlopen(req)
            res = res_stream.read()
            return json.loads(res)


        def pipelines_res(project_slug, circle_token):
            pipelines_endpoint = f'https://circleci.com/api/v2/project/{project_slug}/pipeline'
            pipelines = make_request(pipelines_endpoint, circle_token)
            return pipelines['items']


        def func_k_actor_v_pipelines(pipelines):
            res = {}
            for pipeline in pipelines:
                actor = pipeline['trigger']['actor']['login']
                if actor not in res:
                    res[actor] = []
                pipeline_id = pipeline["id"]
                res[actor].append(pipeline_id)
            return res


        def func_k_actor_v_created_arr(pipelines):
            res = {}
            for pipeline in pipelines:
                actor = pipeline['trigger']['actor']['login']
                if actor not in res:
                    res[actor] = []
                created_at = datetime.datetime.fromisoformat(pipeline['created_at'][:-1])
                res[actor].append(created_at)
            return res


        def func_k_pipeline_v_sha(pipelines):
            return {p['id']: p['vcs']['revision'] for p in pipelines}


        def func_k_actor_v_pipeline_created_limit(k_actor_v_created_arr_dict, last_time, threshold_seconds):
            # latest_time = datetime.fromisoformat(last_time)
            res = {}
            for actor, times in k_actor_v_created_arr_dict.items():
                res[actor] = [(last_time - time).seconds for time in times if
                              (last_time - time).seconds < threshold_seconds and (last_time - time).days == 0]
            return res


        def func_errant_workflows(pipelines, circle_token):
            res = []
            for pipeline_id in pipelines:
                pipeline_endpoint = f'https://circleci.com/api/v2/pipeline/{pipeline_id}/workflow'
                pipeline = make_request(pipeline_endpoint, circle_token)
                res.extend([workflow['id'] for workflow in pipeline['items']])
            return res


        def flatten(l):
            return [item for sublist in l for item in sublist]


        def alert_slack(slack_app_url_str, alert_text_str, siren_test=False):
            if siren_test:
                alert_text_str += "** THIS IS JUST A TEST **"
            user_alert_msg = json.dumps({
                "blocks": [
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": '*USER ALERT*'
                        }
                    },
                    {
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": alert_text_str
                        }
                    },
                ]
            }).encode(encoding='utf-8')
            req = urllib.request.Request(slack_app_url_str, data=user_alert_msg)
            return urllib.request.urlopen(req)


        def get_now():
            return datetime.datetime.utcnow()


        def cancel_workflows(errant_workflows, circle_token):
            for workflow_id in errant_workflows:
                url = f'https://circleci.com/api/v2/workflow/{workflow_id}/cancel'
                make_request(f'{url}',
                             circle_token=circle_token)  # makes HTTP req


        def main():
            vcs = 'gh'

            try:
              circle_token_env_var = os.getenv('circle-token-envvar')
            except TypeError:
              print('circle_token_env_var')
            print('circle_token_env_var', circle_token_env_var)
            try:
              slack_app_url_env_var = os.getenv('slack-app-url-env-var')
            except TypeError:
              print('slack_app_url_env_var')
            print('slack_app_url_env_var', slack_app_url_env_var)
            try:
              gh_token_env_var = os.getenv('gh-token-env-var')
            except TypeError:
              print('slack_app_url_env_var')
            print('slack_app_url_env_var', slack_app_url_env_var)

            try:
              cancel_msg = os.getenv('cancel-message')
            except TypeError:
              print('cancel_msg')

            # circle project vars
            try:
              org = os.getenv('circle-project-org')
            except TypeError:
              print('circle-project-org')
            try:
              repo = os.getenv('circle-project-reponame')
            except TypeError:
              print('circle-project-reponame')

            # secrets
            circle_token = os.getenv(circle_token_env_var)
            slack_app_url = os.getenv(slack_app_url_env_var)
            gh_token = os.getenv(gh_token_env_var)

            # from parameters
            threshold_seconds = int(
                os.getenv('SLACK_MONITOR_PARAM_THRESHOLD_SECONDS')
            )
            # max builds triggered by a single user within threshold_seconds of the current time
            alert_threshold_user = int(
                os.getenv('SLACK_MONITOR_PARAM_THRESHOLD_MAX_BUILDS_PER_USER')
            )
            # max within a minute of the latest build that triggers an alert, must be < 30
            alert_threshold_build = int(
                os.getenv('SLACK_MONITOR_PARAM_THRESHOLD_MAX_BUILDS')
            )

            # check if siren test, write message as "test"
            siren_test = os.getenv('SLACK_MONITOR_PARAM_SIREN_TEST') == 'true'

            project_slug = f'{vcs}/{org}/{repo}'
            pipelines = pipelines_res(project_slug, circle_token)
            current_time = get_now()
            oldest_pipeline_date = pipelines[-1]["created_at"][:-1]

            k_actor_v_created_arr = func_k_actor_v_created_arr(pipelines)
            k_actor_v_pipelines = func_k_actor_v_pipelines(pipelines)
            k_actor_v_pipeline_created_limit = func_k_actor_v_pipeline_created_limit(
                k_actor_v_created_arr,
                current_time,
                threshold_seconds
            )

            # Checks if user exceeds threshold
            # If they do, trigger: slack alert, cancel running workflows for user, comment on PRs.
            for actor, pipeline_ids in k_actor_v_pipeline_created_limit.items():
                if len(pipeline_ids) >= alert_threshold_user:
                    alert_text = f'*{actor}* has triggered {len(pipeline_ids)} pipelines in the past {threshold_seconds} seconds\n ' \
                                 f'(since {current_time}).\n' \
                                 f'Any running workflows triggered by {actor} since {oldest_pipeline_date} will be cancelled.'

                    # slack alert
                    alert_slack(slack_app_url_str=slack_app_url, alert_text_str=alert_text, siren_test=siren_test)

                    # identify and cancel workflows by this user
                    pipelines_by_errant_actor = k_actor_v_pipelines[actor]
                    errant_workflows = func_errant_workflows(pipelines_by_errant_actor, circle_token) # makes HTTP req

                    if not siren_test:
                        cancel_workflows(errant_workflows, circle_token) # makes HTTP req

                    # TODO: complete comment on PR implementation
                    # k_pipeline_v_sha = func_k_pipeline_v_sha(pipelines)
                    # for p in pipelines_by_errant_actor:
                    #     sha = k_pipeline_v_sha[p]
                    #     url = f"https://api.github.com/repos/{org}/{repo}/commits/{sha}/pulls"
                    #
                    #     payload = "{\n  \"body\": \"Me too\"\n}"
                    #     headers = {
                    #         'Auth': f'token {gh_token}',
                    #         'Accept': 'application/vnd.github.groot-preview+json',
                    #         'Content-Type': 'text/plain'
                    #     }
                    #
                    #     response = json.loads(requests.request("GET", url, headers=headers, data=payload).text)

            pipelines_run_under_threshold = []
            for pipeline in pipelines:
                created_at_str = pipeline['created_at']
                created_at = datetime.datetime.fromisoformat(created_at_str[:-1])
                if (current_time - created_at).seconds < threshold_seconds and (current_time-created_at).days == 0:
                    pipelines_run_under_threshold.append(created_at_str)

            if len(pipelines_run_under_threshold) >= alert_threshold_build:
                if len(pipelines_run_under_threshold):
                    build_alert_text = f"There have been *{len(pipelines_run_under_threshold)} pipelines* triggered between " \
                                 f"{pipelines_run_under_threshold[-1]} and {current_time}."
                else:
                    build_alert_text = f"There have been *{len(pipelines_run_under_threshold)} pipelines* triggered since {current_time}."
                alert_slack(slack_app_url_str=slack_app_url, alert_text_str=build_alert_text, siren_test=siren_test)


        main()
        # END PYTHON SCRIPT
        EOF
